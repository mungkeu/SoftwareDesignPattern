/*
 * 소프트웨어 디자인 패턴
 * - 자주 등장하는 공통된 문제들에 대해 이미 알려진 해결책에 이름을 붙여
 *   이후 문제해결에 쉽게 응용할 수 있도록 정리한 것을 말한다.
 * - 설계 패턴을 의미하는 것이어서 구체적인 구현은 결정되어 있지 않으며, 그자체가
 *   완성된 프로그램 솔루션으로 제공되는 것이 아니다.
 *   
 * 디자인 패턴은 건축 아키텍트인 크리스토퍼 알렉산더에 의해 만들어 졌다.
 * 
 * 소프트웨어 분야에서는 1987년 Kent Beck과 Ward Cunningham이 OOPSLA라는 연례 연구
 * 컨퍼런스에서 소프트웨어 패턴을 주창하였다.
 * 
 * 가장 고전적 원서로는 Gang of Four(GOF)라고 불리우는 4명의 저자에 의해 작성된
 * 디자인 패턴 책이 있따.
 * 
 * 디자인 패턴 카테고리
 * - 생성 패턴(Creational Patterns) : 특정 클래스의 객체를 생성하는데 사용되는 패턴들
 * - 구조 패턴(Structural Patterns) : 여러 클래스 혹은 객체들이 어떻게 결합하여 하나의 큰 구조를
 *                                    만드는지에 대한 패턴들
 * - 행위 패턴(Behavioral Patterns) : 여러 객체들 간에 어떻게 상호작용하고 통신하는지에 포커스를
 *                                    맞춘 패턴들
 *                                    
 * 디자인 패턴의 카테고리에는 위 3가지 이외에도 Concurrency, Security...등 여러가지가 있으며,
 * 디자인 패턴 자체는 고정된 것이 아니라 발견되는 패턴들이 계속 늘어나고 있으며 따라서 카테고리
 * 또한 계속 늘어갈 수 있다.
 */